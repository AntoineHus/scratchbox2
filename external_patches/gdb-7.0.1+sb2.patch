diff -urN gdb-7.0.1/gdb/environ.c gdb-7.0.1+sb2/gdb/environ.c
--- gdb-7.0.1/gdb/environ.c	2009-01-03 07:57:51.000000000 +0200
+++ gdb-7.0.1+sb2/gdb/environ.c	2010-02-04 14:27:55.000000000 +0200
@@ -84,6 +84,13 @@
       memcpy (new, e->vector[i], len + 1);
       e->vector[i] = new;
     }
+
+  /* Under sb2 -e, every exec("foobar") is replaced with an
+     exec("ld-linux.so.2 foobar").  But we do not want to debug the
+     dynamic linker, so we have to ask libsb2 to second SIGTRAPs at
+     initialization time.  See fork-child.c too.  */
+  if (getenv("SBOX_SESSION_DIR"))
+    set_in_environ (e, "SBOX_SIGTRAP", "");
 }
 
 /* Return the vector of environment E.
diff -urN gdb-7.0.1/gdb/fork-child.c gdb-7.0.1+sb2/gdb/fork-child.c
--- gdb-7.0.1/gdb/fork-child.c	2009-05-21 18:48:41.000000000 +0300
+++ gdb-7.0.1+sb2/gdb/fork-child.c	2010-02-04 14:27:58.000000000 +0200
@@ -33,6 +33,7 @@
 #include "command.h" /* for dont_repeat () */
 #include "gdbcmd.h"
 #include "solib.h"
+#include "environ.h"
 
 #include <signal.h>
 
@@ -441,6 +442,13 @@
   if (exec_wrapper)
     pending_execs++;
 
+  /* Under sb2 -e, every exec("foobar") is replaced with an
+     exec("ld-linux.so.2 foobar").  But we do not want to debug the
+     dynamic linker, so we wait for libsb2 to do the second SIGTRAPs,
+     and we only stop then.  See environ.c too.  */
+  if (getenv("SBOX_SESSION_DIR"))
+      pending_execs *= 2;
+
   while (1)
     {
       int resume_signal = TARGET_SIGNAL_0;
