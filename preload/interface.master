# SB2 preload library interface definition file
# =============================================
#
# This file defines all symbols that are exported from the SB2 preload
# library. For most symbols, it alse specifies how that symbol (wrapper
# function, typically) should be generated by the interface generator script.
# see gen-interface.pl for details.
#
# Copyright (C) 2007 Lauri T. Aarnio


# 1. historical constructors/destructors.
#    -----------------------------------
#    these seem to be created by ld, and should be exported, although
#    most sources now say that these should not be used (instead use
#    the __atribute__ things that *are* used by this library)

EXPORT: void _init(void)
EXPORT: void _fini(void)

#
# 2. exported functions.
#    -------------------

#    FIXME: The following two functions do not have anything to do with path
#    remapping. Instead the implementations in libsb2.c prevent locking of
#    the shadow file, which I find really hard to understand. Please explain
#    why we should have these wrappers, or should these be removed completely?
EXPORT: int lckpwdf (void)
EXPORT: int ulckpwdf (void)

# 3. "gates"
#    -------
#    Interfaces to functions that are too complex to be generated
#    completely by the interface generator.
#
# getcwd() is the first function that has been converted to use a "gate",
# (other exported functions should follow..) getcwd() was selected to be used
# as an example of this, since it is used frequently and is relatively simple.

GATE: int execl (const char *path, const char *arg, ...) : pass_va_list
GATE: int execle (const char *path, const char *arg, ...) : pass_va_list
GATE: int execlp (const char *file, const char *arg, ...) : pass_va_list
GATE: int execv (const char *path, char *const argv [])
GATE: int execve (const char *filename, char *const argv [], char *const envp[])
GATE: int execvp (const char *file, char *const argv [])

GATE: char * getcwd (char *buf, size_t size)
GATE: char * get_current_dir_name (void)
GATE: char * getwd (char *buf)

GATE: char *mkdtemp (char *template)
GATE: int uname(struct utsname *buf)

#ifdef HAVE_FTS_H
GATE: FTS * fts_open (char * const *path_argv, int options, \
	int (*compar)(const FTSENT **, const FTSENT **))
#endif
GATE: int glob (const char *pattern, int flags, \
	int (*errfunc) (const char *, int), glob_t *pglob) : \
	map(pattern)
GATE: int glob64 (const char *pattern, int flags, \
	int (*errfunc) (const char *, int), glob64_t *pglob) : \
	map(pattern)

#
# 4. Wrappers where the path is not mapped
#    -------------------------------------
#

WRAP: char *tmpnam (char *s)
WRAP: int mkstemp (char *template)
WRAP: int mkstemp64 (char *template)
WRAP: char *mktemp (char *template)

#
# 5. "open()-class":
#    ---------------
#    These are auto-generated wrappers with varargs: an optional "int mode"
#    parameter may be specified in the call. These can be completely handled
#    by the generated wrapped.
#
WRAP: int __open(const char *pathname, int flags, ...) : \
	map(pathname) optional_arg_is_create_mode(flags&O_CREAT)
WRAP: int __open64(const char *pathname, int flags, ...) : \
	map(pathname) optional_arg_is_create_mode(flags&O_CREAT)
WRAP: int open(const char *pathname, int flags, ...) : \
	map(pathname) optional_arg_is_create_mode(flags&O_CREAT) \
	create_nomap_nolog_version
WRAP: int open64(const char *pathname, int flags, ...) : \
	map(pathname) optional_arg_is_create_mode(flags&O_CREAT)
WRAP: int openat(int dirfd, const char *pathname, int flags, ...) : \
	map_at(dirfd,pathname) optional_arg_is_create_mode(flags&O_CREAT)
WRAP: int openat64(int dirfd, const char *pathname, int flags, ...) : \
	map_at(dirfd,pathname) optional_arg_is_create_mode(flags&O_CREAT)

#
# 6. Simple wrappers
#    ---------------
#

# 6a. These wrapper specs have been built manually, based on code in libsb2.c

WRAP: int symlinkat(const char *oldpath, int newdirfd, const char *newpath) : \
	map(oldpath) map_at(newdirfd,newpath)

WRAP: int renameat(int olddirfd, const char *oldpath, int newdirfd, \
	const char *newpath) : \
	map_at(olddirfd,oldpath) map_at(newdirfd,newpath)

WRAP: int linkat(int olddirfd, const char *oldpath, \
	int newdirfd, const char *newpath, int flags) : \
	map_at(olddirfd,oldpath) map_at(newdirfd,newpath)


# 6b. The following wrappers were semi-automatically refactored out of
#     libsb2.c's original code:

WRAP: int __lxstat(int ver, const char *filename, struct stat *buf) : map(filename)
WRAP: int __lxstat64(int ver, const char *filename, struct stat64 *buf) : map(filename)
WRAP: DIR *__opendir2(const char *name, int flags) : map(name)
WRAP: int __xmknod(int ver, const char *path, mode_t mode, dev_t *dev) : map(path)
WRAP: int __xstat(int ver, const char *filename, struct stat *buf) : map(filename)
WRAP: int __xstat64(int ver, const char *filename, struct stat64 *buf) : map(filename)
WRAP: int _xftw(int mode, const char *dir, int (*fn)(const char *file, const struct stat *sb, int flag), int nopenfd) : map(dir)
WRAP: int _xftw64(int mode, const char *dir, int (*fn)(const char *file, const struct stat64 *sb, int flag), int nopenfd) : map(dir)
WRAP: int access(const char *pathname, int mode) : map(pathname) \
	create_nomap_nolog_version
WRAP: int acct(const char *filename) : map(filename)
WRAP: char *canonicalize_file_name(const char *name) : map(name)
WRAP: int chdir(const char *path) : map(path)
WRAP: int chmod(const char *path, mode_t mode) : map(path)
WRAP: int chown(const char *path, uid_t owner, gid_t group) : map(path)
WRAP: int creat(const char *pathname, mode_t mode) : map(pathname)
WRAP: int creat64(const char *pathname, mode_t mode) : map(pathname)
#ifdef __USE_GNU
WRAP: void *dlmopen(Lmid_t nsid, const char *filename, int flag) : map(filename)
#endif
WRAP: void *dlopen(const char *filename, int flag) : map(filename)
WRAP: int euidaccess(const char *pathname, int mode) : map(pathname)
WRAP: int faccessat(int dirfd, const char *pathname, int mode, int flags) : map_at(dirfd,pathname)
WRAP: int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags) : map_at(dirfd,pathname)
WRAP: int fchownat(int dirfd, const char *pathname, uid_t owner, gid_t group, int flags) : map_at(dirfd,pathname)
WRAP: FILE *fopen(const char *path, const char *mode) : map(path)
WRAP: FILE *fopen64(const char *path, const char *mode) : map(path)
WRAP: FILE *freopen(const char *path, const char *mode, FILE *stream) : map(path)
WRAP: FILE *freopen64(const char *path, const char *mode, FILE *stream) : map(path)
WRAP: int fstatat(int dirfd, const char *pathname, struct stat *buf, int flags) : map_at(dirfd,pathname)
WRAP: int ftw(const char *dir, int (*fn)(const char *file, const struct stat *sb, int flag), int nopenfd) : map(dir)
WRAP: int ftw64(const char *dir, int (*fn)(const char *file, const struct stat64 *sb, int flag), int nopenfd) : map(dir)
WRAP: int futimesat(int dirfd, const char *pathname, const struct timeval times[2]) : map_at(dirfd,pathname)
WRAP: ssize_t getxattr(const char *path, const char *name, void *value, size_t size) : map(path)
WRAP: int glob_pattern_p(const char *pattern, int quote) : map(pattern)
WRAP: int lchmod(const char *path, mode_t mode) : map(path)
WRAP: int lchown(const char *path, uid_t owner, gid_t group) : map(path)
WRAP: ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size) : map(path)
WRAP: int link(const char *oldpath, const char *newpath) : map(oldpath) map(newpath)
WRAP: ssize_t listxattr(const char *path, char *list, size_t size) : map(path)
WRAP: ssize_t llistxattr(const char *path, char *list, size_t size) : map(path)
WRAP: int lremovexattr(const char *path, const char *name) : map(path)
WRAP: int lsetxattr(const char *path, const char *name, const void *value, size_t size, int flags) : map(path)
WRAP: int lstat(const char *file_name, struct stat *buf) : map(file_name)
WRAP: int lstat64(const char *file_name, struct stat64 *buf) : map(file_name)
WRAP: int lutimes(const char *filename, const struct timeval tv[2]) : map(filename)
WRAP: int mkdir(const char *pathname, mode_t mode) : map(pathname)
WRAP: int mkdirat(int dirfd, const char *pathname, mode_t mode) : map_at(dirfd,pathname)
WRAP: int mkfifo(const char *pathname, mode_t mode) : map(pathname)
WRAP: int mkfifoat(int dirfd, const char *pathname, mode_t mode) : map_at(dirfd,pathname)
WRAP: int mknod(const char *pathname, mode_t mode, dev_t dev) : map(pathname)
WRAP: int mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev) : map_at(dirfd,pathname)
WRAP: int nftw(const char *dir, int (*fn)(const char *file, const struct stat *sb, int flag, struct FTW *s), int nopenfd, int flags) : map(dir)
WRAP: int nftw64(const char *dir, int (*fn)(const char *file, const struct stat64 *sb, int flag, struct FTW *s), int nopenfd, int flags) : map(dir)
WRAP: DIR *opendir(const char *name) : map(name)
WRAP: long pathconf(const char *path, int name) : map(path)
WRAP: READLINK_TYPE readlink(const char *path, char *buf, size_t bufsize) : map(path)
WRAP: READLINK_TYPE readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsize) : map_at(dirfd,pathname)
WRAP: char *realpath(const char *name, char *resolved) : map(name)
WRAP: int remove(const char *pathname) : map(pathname)
WRAP: int removexattr(const char *path, const char *name) : map(path)
WRAP: int rename(const char *oldpath, const char *newpath) : map(oldpath) map(newpath)
WRAP: int revoke(const char *file) : map(file)
WRAP: int rmdir(const char *pathname) : map(pathname)
WRAP: int scandir(const char *dir, struct dirent ***namelist, SCANDIR_TYPE_ARG3, int(*compar)(const void *, const void *)) : map(dir) hardcode_param(3,filter)
WRAP: int scandir64(const char *dir, struct dirent64 ***namelist, int(*filter)(const struct dirent64 *), int(*compar)(const void *, const void *)) : map(dir)
WRAP: int setxattr(const char *path, const char *name, const void *value, size_t size, int flags) : map(path)
WRAP: int stat(const char *file_name, struct stat *buf) : map(file_name)
WRAP: int stat64(const char *file_name, struct stat64 *buf) : map(file_name)
WRAP: int symlink(const char *oldpath, const char *newpath) : map(oldpath) map(newpath)
WRAP: char *tempnam(const char *dir, const char *pfx) : map(dir)
WRAP: int truncate(const char *path, off_t length) : map(path)
WRAP: int truncate64(const char *path, off64_t length) : map(path)
WRAP: int unlink(const char *pathname) : map(pathname)
WRAP: int unlinkat(int dirfd, const char *pathname, int flags) : map_at(dirfd,pathname)
WRAP: int utime(const char *filename, const struct utimbuf *buf) : map(filename)
WRAP: int utimes(const char *filename, const struct timeval tv[2]) : map(filename)

# 7. Test functions:
#
#GATE: int test_fn(char *a, char *b)
#GATE: int vtest_fn(char *a, char *b,...) : pass_va_list
#GATE: int maptest_fn(char *a, char *b) : map(a) map(b)
