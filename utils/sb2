#!/bin/bash
# Copyright (C) 2006,2007 Lauri Leukkunen <lle@rahina.org>
# Licensed under GPL version 2

function version()
{
	cat $SBOX_DIR/share/scratchbox2/version
	exit 0
}

function usage()
{
	cat <<EOF
sb2 - crosscompiling environment
Usage:
    sb2 [OPTION]... [COMMAND] [PARAMETERS]

If no COMMAND is given, a bash shell in scratchbox2 environment is started.

Options:
    -v           display version
    -d           debug mode: log all redirections
    -h           print this help
    -t DIRECTORY target directory, else search up in directory
                 structure for a .sb2rc
    -e           emulation mode
    -m DIRECTORY load preload scripts from alternative location

Examples:
    sb2 ./configure
	sb2 make
	sb2 -e make install
EOF
	exit 2
}

function exit_error()
{
		echo "$@"
		exit 1
}

function sanity_check()
{
	if [ `id -u` = 0 ] ; then
		exit_error "Do not use sbox2 as root!"
	fi
	# check that most important host and target files exist
}

find_target_root()
{
(
	while [ "$PWD" != "/" ]; do
		if [ -r sb2.config -o -d .sb2cache ]; then
			echo "$(readlink -f -n $PWD)"
			return 0
		else
			cd ..
		fi
	done
	return 1
)
}

function sboxify_environment()
{

	if [ -r ~/.sb2rc ]; then
		. ~/.sb2rc
	fi

	if [ -z "$SBOX_TARGET_ROOT" ]; then
		SBOX_TARGET_ROOT=`find_target_root` || exit_error "Cannot find target root!"
	fi

	SBOX_MAPPING_CACHE=$SBOX_TARGET_ROOT/.sb2cache
	if [ ! -d $SBOX_MAPPING_CACHE ]; then
		mkdir -p $SBOX_MAPPING_CACHE
	fi


	if [ -n "$SBOX_DIR" ]; then
		SBOX_LIBSB2="$SBOX_DIR/lib/libsb2/libsb2.so.1"
		if [ -z "$SBOX_REDIR_SCRIPTS" ]; then
			SBOX_REDIR_SCRIPTS="$SBOX_DIR/share/scratchbox2/redir_scripts"
		fi
		SBOX_GCCWRAPPER="$SBOX_DIR/bin/sb_gcc_wrapper"
	else
		exit_error "Something foul happeninged..."
	fi

	if [ -n "$SBOX_TOOLS_ROOT" ]; then
		REDIR_LD_SO="$SBOX_TOOLS_DIR/lib/ld-linux.so.2"
		REDIR_LD_LIBRARY_PATH="$SBOX_TOOLS_DIR/lib:$SBOX_TOOLS_DIR/usr/lib:$SBOX_TOOLS_DIR/usr/local/lib"

		export REDIR_LD_SO REDIR_LD_LIBRARY_PATH SBOX_TOOLS_ROOT
	fi

	export SBOX_LIBSB2 SBOX_REDIR_SCRIPTS SBOX_TARGET_ROOT SBOX_MAPPING_CACHE SBOX_GCCWRAPPER SBOX_TARGET_COMPILER

	# -Riku: I don't think we want to run this on every sb2 invocation..
	HOST_GCC_INC_DIR=$(echo "#include <stdio.h>" | gcc -M -E - | perl -e 'while(<STDIN>) { $foo{$1} = 1 if m/\/usr([^[:space:]]*\/include)/;}; foreach my $k (keys %foo) {print " -isystem $ENV{SBOX_DIR}/share/scratchbox2/host_usr$k"};')

	export PATH=$SBOX_TARGET_ROOT/sb_tools/bin:$SBOX_DIR/share/scratchbox2/scripts:$SBOX_DIR/bin:$PATH:$SBOX_TARGET_ROOT/bin:$SBOX_TARGET_ROOT/usr/bin:$SBOX_TARGET_ROOT/usr/local/bin:/sbin:/usr/sbin

	export LD_PRELOAD=$SBOX_LIBSB2
	export SBOX_EXTRA_HOST_COMPILER_ARGS="$HOST_GCC_INC_DIR"
	export SBOX_EXTRA_CROSS_COMPILER_ARGS="--sysroot=$SBOX_TARGET_ROOT"
	export SBOX_SCRATCHBOX_CONFIG=$SBOX_TARGET_ROOT/sb2.config
	export PS1="[SB2] \u@\h \w \$ "

	. $SBOX_SCRATCHBOX_CONFIG

	# Debian exports REVISIT on dpkg 1.14
	if [ $SBOX_CPU = "arm" ]; then
		export DEB_BUILD_ARCH=armel
	else
		export DEB_BUILD_ARCH=$SBOX_CPU
	fi
	export DEB_BUILD_ARCH_CPU=$SBOX_CPU
	export DEB_BUILD_GNU_CPU=$SBOX_CPU
	export DEB_BUILD_GNU_TYPE=$SBOX_CPU-linux-gnu

	export SBOX_COMPILER_ROOT=$(readlink -f $SBOX_CROSS_GCC_DIR/..)
	export SBOX_CPUTRANSPARENCY_METHOD
	export SBOX_CROSS_GCC_PREFIX_LIST
	export SBOX_HOST_GCC_PREFIX_LIST
	export SBOX_UNAME_MACHINE=$SBOX_CPU

	if [ "$SBOX_MAPPING_DEBUG" == "1" ]; then
		export SBOX_DISABLE_MAPPING_CACHE=1 # disable the cache to force use of lua engine
		export SBOX_MAPPING_LOGFILE=$HOME/sb2_mapping.log
		echo "Running scratchbox with these settings:"
		echo "SBOX_LIBSB2 = $SBOX_LIBSB2"
		echo "SBOX_REDIR_SCRIPTS = $SBOX_REDIR_SCRIPTS"
		echo "SBOX_GCCWRAPPER = $SBOX_GCCWRAPPER"
		echo "REDIR_LD_SO = $REDIR_LD_SO"
		echo "REDIR_LD_LIBRARY_PATH = $REDIR_LD_LIBRARY_PATH"
		echo "SBOX_TARGET_ROOT = $SBOX_TARGET_ROOT"
	fi
}

export SBOX_DIR=$(readlink -f $(dirname $0)/..)

while getopts vdht:em: foo
do
	case $foo in
	(v) version ;;
	(d) export SBOX_MAPPING_DEBUG=1 ;;
	(h) usage ;;
	(t) export SBOX_TARGET_ROOT=$OPTARG ;;
	(e) export SBOX_MAPMODE=emulate ;;
	(m) export SBOX_REDIR_SCRIPTS=$OPTARG;;
	(*) usage ;;
	esac
done
shift $(($OPTIND - 1))

# read commands to execute from stdin - not yet implemented
if [ "$1" = "-" ] ; then
	STDIN=true
fi

sboxify_environment

# set the initial binary name for the mapping engine
export __SB2_BINARYNAME="bash"

if [ $# -gt 0 -o "$STDIN" = true ] ; then
	binary="$1"
	shift 1
	args="$@"
	exec /bin/sh -c "$binary $args"
else
	exec /bin/bash --noprofile --norc
fi

