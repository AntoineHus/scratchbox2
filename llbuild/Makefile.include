# ll build system
#
# Copyright (C) 2006 Lauri Leukkunen <lle@rahina.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Make sure this file is only included once per make invocation
ifndef _LL_BUILD_MAKEFILE_INCLUDE
_LL_BUILD_MAKEFILE_INCLUDE=1

# this is here to enforce a sensible default target
__kicker_target: all


TOPDIR := $(CURDIR)

# import all the subdir Makefiles recursively

define import_dir
	subdirs := 
	objects :=
	targets :=
	LLPWD := $(1)
	include $(1)/Makefile
	dep_files := $$(wildcard $(1)/.*.d)
ifneq ($$(dep_files),) 
	include $$(dep_files)
endif
	all-targets := $$(all-targets) $$(targets)
	all-objects := $$(all-objects) $$(patsubst %,$(1)/%,$$(objects))
	tmp := $$(patsubst %,$(1)/%,$$(subdirs))
	perkele := $$(foreach dir,$$(tmp),$$(eval $$(call import_dir,$$(dir))))
endef

$(foreach dir,$(subdirs),$(eval $(call import_dir,$(dir))))


built_in_target := built-in.o

all_objects := $(obj-builtin)
all_objects += $(foreach t,$(extra_targets),$($(t)))


define llbuild_link_shbin
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)"; \
	run_alias="BIN"; \
	$(ll_pretty_run)
endef

define llbuild_link_shcxxbin
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(CXX) $(CFLAGS) $(LDFLAGS) $(CXXFLAGS) -o $@ $^ $(LIBS)"; \
	run_alias="CXXBIN"; \
	$(ll_pretty_run)
endef

define llbuild_link_shlib
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $@ $^ $(LIBS)"; \
	run_alias="SHLIB"; \
	$(ll_pretty_run)
endef

define llbuild_link_archive
	@run_sources=""; \
	run_target="$@"; \
	run_cmd="$(CC) -Wl,-r -nostdlib -nodefaultlibs -nostartfiles -o $@ $^"; \
	run_alias="ARCHIVE"; \
	$(ll_pretty_run)
endef


ifndef ll_verbose
define ll_pretty_run
	run_output="$$($$run_cmd 2>&1)"; \
	if [ $$? -ne 0 ]; then \
		echo "$$run_cmd"; echo "$$run_output"; \
		false; \
	else \
		echo "[$$run_alias] [$$run_target] $$run_sources"; \
		echo "$$run_output" | grep " warning: "; \
		true ; \
	fi
endef
else
define ll_pretty_run
	echo $$run_cmd; \
	$$run_cmd;
endef
endif

define ll_pretty_build_c
	@run_sources="$<"; \
	run_target="$@"; \
	run_cmd="$(CC) $(CFLAGS) -Wp,-MD,$(dir $(@))/.$(notdir $(@)).d -o $@ -c $<"; \
	run_alias="CC"; \
	$(ll_pretty_run)
endef

define ll_pretty_build_cc
	@run_sources="$<"; \
	run_target="$@"; \
	run_cmd="$(CXX) $(CFLAGS) $(CXXFLAGS) -Wp,-MD,$(dir $(@))/.$(notdir $(@)).d -o $@ -c $<"; \
	run_alias="CXX"; \
	$(ll_pretty_run)
endef

define ll_pretty_link_builtin
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(CC) -Wl,-r -nostdlib -nodefaultlibs -nostartfiles -o $@ $^"; \
	run_alias="LD"; \
	$(ll_pretty_run)
endef

%.o:: %.S
	$(ll_pretty_build_c)

%.o:: %.c
	$(ll_pretty_build_c)

%.o:: %.cc
	$(ll_pretty_build_cc)

%.o:: %.cpp
	$(ll_pretty_build_cc)

%:: %.cc

%:: %.c

%:: %.o


define ll_clean
	rm -rf $(CLEAN_FILES)
	find . -name "*.[oasd]" -o -name ".*.d" -o -name "*.*~" -o -name "*~" -o -name "*.lock" | xargs rm -rf
endef

endif

