# ll build system
#
# Copyright (C) 2006 Lauri Leukkunen <lle@rahina.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Make sure this file is only included once per make invocation
ifndef _LL_BUILD_MAKEFILE_INCLUDE
_LL_BUILD_MAKEFILE_INCLUDE=1

#$(warning Hello, from $(CURDIR))
-include $(TOPDIR)/.config

LLBUILD ?= $(TOPDIR)/llbuild

built_in_target := built-in.o

all_objects := $(obj-builtin)
all_objects += $(foreach t,$(extra_targets),$($(t)))

filter_subdirs := $(shell for d in $(subdirs) $(all_objects) ; do if [ -d $$d ]; then echo $$d; fi; done)


filter_objects := $(shell for f in $(all_objects) ; do if [ -d $$f ]; then echo $$f/built-in.o; else echo $$f; fi; done)
builtin_filter_objects := $(shell for f in $(obj-builtin) ; do if [ -d $$f ]; then echo $$f/built-in.o; else echo $$f; fi; done)

real_subdirs := $(foreach dir,$(filter_subdirs),$(shell readlink -f $(CURDIR)/$(dir)))
subdir_deps := $(foreach path,$(real_subdirs),$(dir $(path)).$(notdir $(path).subdir.d))

.PRECIOUS: $(filter_objects)

LOCK ?= $(LLBUILD)/llflock $@.lock

%.subdir.d:
	@if [ ! -e $@.lock ]; then touch $@.lock; fi
	@$(LOCK) /bin/sh -c "if [ ! -e $@ ]; then $(MAKE) --no-print-directory -C $(dir $@)$(patsubst .%,%,$(patsubst %.subdir.d,%,$(notdir $@))) -f $(LLBUILD)/Makefile.build ll_subdir && touch $@; fi;"


# these are for handling extra_targets

bin-%: $(filter_objects)
	@run_sources="$($@)"; \
	run_target="$(patsubst bin-%,%,$@)"; \
	run_cmd="$(CC) $(CCFLAGS) $(LDFLAGS) -o $(patsubst bin-%,%,$@) $(shell for f in $($@) ; do if [ -d $$f ]; then echo $$f/built-in.o; else echo $$f; fi; done) $(LIBS)"; \
	run_alias="BIN"; \
	$(ll_pretty_run)

cxxbin-%: $(filter_objects)
	@run_sources="$($@)"; \
	run_target="$(patsubst cxxbin-%,%,$@)"; \
	run_cmd="$(CXX) $(CFLAGS) $(LDFLAGS) $(CXXFLAGS) -o $(patsubst cxxbin-%,%,$@) $(shell for f in $($@) ; do if [ -d $$f ]; then echo $$f/built-in.o; else echo $$f; fi; done) $(LIBS)"; \
	run_alias="CXXBIN"; \
	$(ll_pretty_run)

shlib-%: $(filter_objects)
	@run_sources="$($@)"; \
	run_target="$(patsubst shlib-%,%,$@)"; \
	run_cmd="$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $(patsubst shlib-%,%,$@) $(shell for f in $($@) ; do if [ -d $$f ]; then echo $$f/built-in.o; else echo $$f; fi; done) $(LIBS)"; \
	run_alias="SHLIB"; \
	$(ll_pretty_run)

ll_mainlevel:
	@find $(TOPDIR) -name "*.subdir.d.lock" -o -name "*.subdir.d" | xargs rm -f
	@$(MAKE) --no-print-directory -f $(LLBUILD)/Makefile.build ll_subdir


ll_subdir: $(subdir_deps) 
	@$(MAKE) --no-print-directory -f $(LLBUILD)/Makefile.build $(built_in_target) $(extra_targets)

ifeq ("$(strip $(builtin_filter_objects))", "")
$(built_in_target):
	@true
else
$(built_in_target): $(builtin_filter_objects)
	$(ll_pretty_link_builtin)
endif

OPT_CURDIR = $(patsubst /%,%,$(strip $(subst $(TOPDIR), , $(CURDIR))))
ifeq ("$(OPT_CURDIR)","")
OPT_CURDIR="."
endif

ifndef ll_verbose
define ll_pretty_run
	run_output="$$($$run_cmd 2>&1)"; \
	if [ $$? -ne 0 ]; then \
		echo "$$run_cmd"; echo $(OPT_CURDIR)/"$$run_output"; \
		false; \
	else \
		echo "[$$run_alias] [$(OPT_CURDIR)/$$run_target] $$run_sources"; \
		echo "$$run_output" | grep " warning: "; \
		true ; \
	fi
endef
else
define ll_pretty_run
	echo $$run_cmd; \
	$$run_cmd;
endef
endif

define ll_pretty_build_c
	@run_sources="$<"; \
	run_target="$@"; \
	run_cmd="$(CC) $(CFLAGS) -Wp,-MD,$(dir $(@))/.$(notdir $(@)).d -o $@ -c $<"; \
	run_alias="CC"; \
	$(ll_pretty_run)
endef

define ll_pretty_build_cc
	@run_sources="$<"; \
	run_target="$@"; \
	run_cmd="$(CXX) $(CFLAGS) $(CXXFLAGS) -Wp,-MD,$(dir $(@))/.$(notdir $(@)).d -o $@ -c $<"; \
	run_alias="CXX"; \
	$(ll_pretty_run)
endef

define ll_pretty_link_builtin
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(LD) -r -nostartfiles -o $@ $^"; \
	run_alias="LD"; \
	$(ll_pretty_run)
endef

define ll_pretty_link_shared_library
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $@ $^ $(LIBS)"; \
	run_alias="SHLIB"; \
	$(ll_pretty_run)
endef

define ll_pretty_link_shared_binary
	@run_sources="$^"; \
	run_target="$@"; \
	run_cmd="$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)"; \
	run_alias="BIN";\
	$(ll_pretty_run)
	echo "after linking shared binary"
endef

%.o: %.S
	$(ll_pretty_build_c)

%.o: %.c
	$(ll_pretty_build_c)

%.o: %.cc
	$(ll_pretty_build_cc)

%.o: %.cpp
	$(ll_pretty_build_cc)


dep_files = $(wildcard .*.d)

ifneq ("$(dep_files)", "")
	include $(dep_files)
endif

.PHONY: build $(subdirs)

define ll_clean
	+@$(MAKE) --no-print-directory -C $(LLBUILD) MAKEFLAGS= MAKEFILES= clean
	rm -rf $(CLEAN_FILES)
	find . -name "*.[oasd]" -o -name ".*.d" -o -name "*.*~" -o -name "*~" -o -name "*.lock" | xargs rm -rf
endef

define ll_toplevel_build
	+@$(MAKE) --no-print-directory -C $(LLBUILD) MAKEFLAGS= MAKEFILES=
	+@$(MAKE) --no-print-directory -f $(LLBUILD)/Makefile.build ll_mainlevel
endef

endif

